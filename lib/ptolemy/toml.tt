grammar TOML

  rule toml
    list:((separator* elem:(key_group / key_value))*) separator* <Toml>
  end

  rule key_group
    space? '[' keys:(key remaining_keys:('.' key)*) ']' space? <KeyGroup>
  end

  rule key_value
    space? key space? '=' space? value space? <KeyValue>
  end

  rule key
    [a-zA-Z_] [a-zA-Z0-9_?#!]* <Key>
  end

  rule value
    (boolean / date / float / integer / string / array)
  end

  rule separator
    comment / space / newline
  end

  rule newline
    "\n" / "\r\n"
  end

  rule comment
    '#' (!newline .)* <Comment>
  end

  rule array
    '[' list:(separator* item:string separator* ',')* separator* last:(separator* item:string separator*)? ']' <ArrayLiteral> /
    '[' list:(separator* item:date separator* ',')* separator* last:(separator* item:date separator*)? ']' <ArrayLiteral> /
    '[' list:(separator* item:float separator* ',')* separator* last:(separator* item:float separator*)? ']' <ArrayLiteral> /
    '[' list:(separator* item:integer separator* ',')* separator* last:(separator* item:integer separator*)? ']' <ArrayLiteral> /
    '[' list:(separator* item:boolean separator* ',')* separator* last:(separator* item:boolean separator*)? ']' <ArrayLiteral> /
    '[' list:(separator* item:array separator* ',')* separator* last:(separator* item:array separator*)? ']' <ArrayLiteral>
  end

  rule string
    '"' string:([^"\\] / "\\" . )* '"' <StringLiteral>
  end

  rule date
    year:([0-9] 4..4) '-' month:([0-9] 2..2) '-' day:([0-9] 2..2)
    'T' hour:([0-9] 2..2) ':' min:([0-9] 2..2) ':' sec:([0-9] 2..2) 'Z' <DateLiteral>
  end

  rule float
    ('+' / '-')? [0-9]+ ('.' [0-9]+) <FloatLiteral>
  end

  rule integer
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end

  rule boolean
    ('true' <BooleanLiteral> / 'false' <BooleanLiteral>)
  end

  rule space
    [ \t]+
  end

end
