grammar TOML

  rule key_group
    space? '[' keys:(key ('.' key)*) ']' space? <KeyGroup>
  end

  rule key_value
    space? key space? '=' space? value space? <KeyValue>
  end

  rule key
    [a-zA-Z_] [a-zA-Z0-9_]* <Key>
  end

  rule value
    (boolean / date / float / integer / string / array)
  end

  rule separator
    comment / space / newline
  end

  rule newline
    "\n" / "\r\n"
  end

  rule comment
    '#' (!newline .)* <Comment>
  end

  rule array
    '[' (separator* string separator* ',')* separator* (separator* string separator*)? ']' <ArrayLiteral> /
    '[' (separator* date separator* ',')* separator* (separator* date separator*)? ']' <ArrayLiteral> /
    '[' (separator* float separator* ',')* separator* (separator* float separator*)? ']' <ArrayLiteral> /
    '[' (separator* integer separator* ',')* separator* (separator* integer separator*)? ']' <ArrayLiteral> /
    '[' (separator* boolean separator* ',')* separator* (separator* boolean separator*)? ']' <ArrayLiteral> /
    '[' (separator* array separator* ',')* separator* (separator* array separator*)? ']' <ArrayLiteral>
  end

  rule string
    '"' string:([^"\\] / "\\" . )* '"' <StringLiteral>
  end

  rule date
    [0-9] 4..4 '-' [0-9] 2..2 '-' [0-9] 2..2
    'T' [0-9] 2..2 ':' [0-9] 2..2 ':' [0-9] 2..2 'Z' <DateLiteral>
  end

  rule float
    ('+' / '-')? [0-9]+ ('.' [0-9]+) <FloatLiteral>
  end

  rule integer
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end

  rule boolean
    ('true' <BooleanLiteral> / 'false' <BooleanLiteral>)
  end

  rule space
    [ \t]+
  end

end
